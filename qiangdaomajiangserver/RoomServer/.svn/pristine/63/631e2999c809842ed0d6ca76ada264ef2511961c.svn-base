package com.lebin.server.util;
import java.util.Properties;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

public final class RedisUtil {
    
    
    
    //可用连接实例的最大数目，默认值为8；
    //如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
    private static int MAX_ACTIVE = 1024;
    
    //控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8。
    private static int MAX_IDLE = 50;
    
    //等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException；
    private static int MAX_WAIT = 10000;
    
    private static int TIMEOUT = 10000;
    
    //在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；
    private static boolean TEST_ON_BORROW = true;
    
    private static JedisPool jedisPool = null;
    
    /**
     * 初始化Redis连接池
     */
    static {
        try {
            JedisPoolConfig config = new JedisPoolConfig();
            java.io.InputStream in=Thread.currentThread().getContextClassLoader().getResourceAsStream("config/redis-config.properties");
            Properties properties=new Properties();
            if(in!=null)
            try {
				properties.load(in);
				in.close();
			} catch (Exception e) {
				// TODO: handle exception
			}
            config.setMaxActive(Integer.parseInt(properties.getProperty("max_active", MAX_ACTIVE+"")));
            config.setMaxIdle(Integer.parseInt(properties.getProperty("max_idle", MAX_IDLE+"")));
            config.setMaxWait(Long.parseLong(properties.getProperty("max_wait", MAX_WAIT+"")));
            config.setTestOnBorrow(Boolean.parseBoolean(properties.getProperty("test_on_borrow", TEST_ON_BORROW+"")));
            String host=properties.getProperty("host","127.0.0.1");
            int port=Integer.parseInt(properties.getProperty("port","6379"));
           int timeout=Integer.parseInt(properties.getProperty("timeout",TIMEOUT+""));
           String psw=properties.getProperty("psw","");
            System.out.println("create redispool @"+host+":"+port+"/"+psw);
            if("".equals(psw))
            	jedisPool = new JedisPool(config,host,port,timeout);
            else 
            	jedisPool = new JedisPool(config, host, port, timeout, psw);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * 获取Jedis实例
     * @return
     */
    public synchronized static Jedis getJedis() {
        try {
            if (jedisPool != null) {
                Jedis resource = jedisPool.getResource();
                return resource;
            } else {
                return null;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * 释放jedis资源
     * @param jedis
     */
    public static void returnResource(final Jedis jedis) {
        if (jedis != null) {
            jedisPool.returnResource(jedis);
        }
    }
}