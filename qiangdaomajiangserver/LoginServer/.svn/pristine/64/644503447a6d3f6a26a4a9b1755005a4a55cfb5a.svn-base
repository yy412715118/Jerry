package com.hogense.game.server.handler;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import com.hogense.game.server.Config;
import com.hogense.game.server.annotation.Autowired;
import com.hogense.game.server.annotation.HttpService;
import com.hogense.game.server.sevice.UserService;
import com.hogense.util.IpUtils;
import com.hogense.util.StringUtil;

import atg.taglib.json.util.JSONObject;
@HttpService("/api/login/anysdk")
public class AnySdkLoginServlet extends HttpServlet{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final Logger LOG = Logger.getLogger(LoginHttpServlet.class.getName());
	/**
	 * anysdk统一登录地址
	 */
	private String loginCheckUrl = "http://oauth.anysdk.com/api/User/LoginOauth/";
	/**
	 * connect time out
	 * 
	 * @var int
	 */
	private int connectTimeOut = 30 * 1000;

	/**
	 * time out second
	 * 
	 * @var int
	 */
	private int timeOut = 30 * 1000;

	/**
	 * user agent
	 * 
	 * @var string
	 */
	private static final String userAgent = "px v1.0";
	@Autowired
	UserService service;
	@Override
	protected void service(HttpServletRequest arg0, HttpServletResponse arg1) throws ServletException, IOException {
		check(arg0,arg1);
	}
	/**
	 * 检查登录合法性及返回sdk返回的用户id或部分用户信息
	 * @param request
	 * @param response
	 * @return 验证合法 返回true 不合法返回 false
	 */
	public boolean check( HttpServletRequest request, HttpServletResponse response ) {
		
    	try{
            Map<String,String[]> params = request.getParameterMap();
            //检测必要参数
            if(parametersIsset( params )) {
            	sendToClient( response, "parameter not complete" );
                return false;
            }
            String queryString = getQueryString( request );
            LOG.debug("request from client: "+queryString);
            URL url = new URL( loginCheckUrl );
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestProperty( "User-Agent", userAgent );
            conn.setReadTimeout(timeOut);
            conn.setConnectTimeout(connectTimeOut);
            conn.setRequestMethod("POST");
            conn.setDoInput(true);
            conn.setDoOutput(true);
            
            OutputStream os = conn.getOutputStream();
            BufferedWriter writer = new BufferedWriter( new OutputStreamWriter(os, "UTF-8") );
            writer.write( queryString );
            writer.flush();
            tryClose( writer );
            tryClose( os );
            conn.connect();
            
            InputStream is = conn.getInputStream();
            String result = stream2String( is ); 
            
            LOG.info("rsp from anysdk: "+result);
            JSONObject js=new JSONObject(result);
            if("ok".equalsIgnoreCase(js.getString("status")))
            {
            	JSONObject data=doLogin(request, js);
            	if(data==null)
            	{
            		LOG.warn("无法注册");
            		sendToClient( response, "无法注册!" );
            		return false;
            	}
            	js.put("ext", data);
            }
            sendToClient( response, js.toString() );
            return true;
    	} catch( Exception e ) {
    		e.printStackTrace();
    	}
        sendToClient( response, "Unknown error!" );
    	return false;
    }
	private JSONObject doLogin(HttpServletRequest request,JSONObject rspdata)
	{
		try {
			
			String gameid=Config.getProperty("gameid");
			String deviceid=null;
			Integer type=1;
			JSONObject data=rspdata.getJSONObject("data");
			JSONObject userinfo=data.getJSONObject("user_info");
			String openid=userinfo.getString("openid");
			String head=userinfo.getString("headimgurl");
			if(head!=null&&head.endsWith("/0"))
				head=head+".jpg";
			String nick=StringUtil.filterEmoji(userinfo.getString("nickname"));
			String sex=userinfo.getString("sex");
			JSONObject user=service.login(IpUtils.getIpAddr(request),gameid,deviceid, openid,nick,head,type,sex);
			LOG.info("login:"+user);
			if(user!=null&&user.getInt("status")==200)
			{
				JSONObject rs=new JSONObject();
				user.put("nickname", nick);
				user.put("head", head);
				//user.remove("status");
				//user.remove("msg");
				rs.put("user", user);
				rs.put("time", System.currentTimeMillis());
				rs.put("server", Config.getProperty("centerserver_host", "http://127.0.0.1"));
				return rs;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
		
	}

	public void setLoginCheckUrl(String loginCheckUrl) {
		this.loginCheckUrl = loginCheckUrl;
	}

	/**
	 * 设置连接超时
	 * @param connectTimeOut
	 */
	public void setConnectTimeOut(int connectTimeOut) {
		this.connectTimeOut = connectTimeOut;
	}

	/**
	 * 设置超时时间
	 * @param timeOut
	 */
	public void setTimeOut(int timeOut) {
		this.timeOut = timeOut;
	}


	/**
	 * check needed parameters isset 检查必须的参数 channel
	 * uapi_key：渠道提供给应用的app_id或app_key（标识应用的id）
	 * uapi_secret：渠道提供给应用的app_key或app_secret（支付签名使用的密钥）
	 * 
	 * @param params
	 * @return boolean
	 */
	private boolean parametersIsset(Map<String, String[]> params) {
		return !(params.containsKey("channel") && params.containsKey("uapi_key")
				&& params.containsKey("uapi_secret"));
	}

	/**
	 * 获取查询字符串
	 * @param request
	 * @return
	 */
	private String getQueryString( HttpServletRequest request )  {
		Map<String, String[]> params = request.getParameterMap();
		String queryString = "";
		for (String key : params.keySet()) {
			String[] values = params.get(key);
			for (int i = 0; i < values.length; i++) {
				String value = values[i];
				queryString += key + "=" + value + "&";
			}
		}
		queryString = queryString.substring(0, queryString.length() - 1);
		return queryString;
	}

	/**
	 * 获取流中的字符串
	 * @param is
	 * @return
	 */
	private String stream2String( InputStream is ) {
		BufferedReader br = null;
		try{
			br = new BufferedReader( new java.io.InputStreamReader( is,"utf-8" ));	
			String line = "";
			StringBuilder sb = new StringBuilder();
			while( ( line = br.readLine() ) != null ) {
				sb.append( line );
			}
			return sb.toString();
		} catch( Exception e ) {
			e.printStackTrace();
		} finally {
			tryClose( br );
		}
		return "";
	}
	
	/**
	 * 向客户端应答结果
	 * @param response
	 * @param content
	 */
	private void sendToClient( HttpServletResponse response, String content ) {
		LOG.debug("rsp: "+content);
		response.setContentType( "text/plain;charset=utf-8");
		try{
			PrintWriter writer = response.getWriter();
			writer.write( content );
			writer.flush();
		} catch( Exception e ) {
			e.printStackTrace();
		}
	}
	/**
	 * 关闭输出流
	 * @param os
	 */
	private void tryClose( OutputStream os ) {
		try{
			if( null != os ) {
				os.close();
				os = null;
			}
		} catch( Exception e ) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 关闭writer
	 * @param writer
	 */
	private void tryClose( java.io.Writer writer ) {
		try{
			if( null != writer ) {
				writer.close();
				writer = null;
			}
		} catch( Exception e ) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 关闭Reader
	 * @param reader
	 */
	private void tryClose( java.io.Reader reader ) {
		try{
			if( null != reader ) {
				reader.close();
				reader = null;
			}
		} catch( Exception e ) {
			e.printStackTrace();
		}
	}
}
